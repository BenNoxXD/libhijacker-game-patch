#include "dbg/dbg.hpp"
#include "game_patch_memory.hpp"

void hexdump1(void *data, size_t size)
{
#ifdef DEBUG
	if (size <= 0)
		return;
	unsigned char *p = (unsigned char *)data;
	size_t i = 0;

	for (i = 0; i < size; i++)
	{
		printf("%02x", *p++);
		if (!(i % 16) && i != 0)
		{
			printf("\n");
		}
	}

	printf("\n");
#endif
}

// valid hex look up table.
const u8 hex_lut[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00};

__attribute__((noinline)) static u8 *hexstrtochar2(const char *hexstr, s64 *size)
{
	u32 str_len = strlen(hexstr);
	s64 data_len = ((str_len + 1) / 2) * sizeof(u8);
	*size = (str_len) * sizeof(u8);
	u8 *data = (u8 *)malloc(*size);
	u32 j = 0; // hexstr position
	u32 i = 0; // data position

	if (str_len % 2 == 1)
	{
		data[i] = (u8)(hex_lut[0] << 4) | hex_lut[(u8)hexstr[j]];
		j = ++i;
	}

	for (; j < str_len; j += 2, i++)
	{
		data[i] = (u8)(hex_lut[(u8)hexstr[j]] << 4) |
				  hex_lut[(u8)hexstr[j + 1]];
	}

	*size = data_len;
	return data;
}

void dump_bytes_vm(pid_t pid, u64 addr, size_t bytes_size)
{
#ifdef DEBUG
	constexpr size_t MAX_BYTES = 256;
	if (bytes_size >= MAX_BYTES || bytes_size <= 0)
		return;
	char buffer[MAX_BYTES] = {0};
	dbg::read(pid, addr, buffer, bytes_size);
	hexdump1(buffer, bytes_size);
#endif
}

void write_bytes(pid_t pid, u64 addr, const char *hexString)
{
	u8 *byteArray = nullptr;
	s64 bytesize = 0;
	byteArray = hexstrtochar2(hexString, &bytesize);
	dump_bytes_vm(pid, addr, bytesize);
	dbg::write(pid, addr, byteArray, bytesize);
	dump_bytes_vm(pid, addr, bytesize);
	free(byteArray);
}

void write_bytes32(pid_t pid, u64 addr, const u32 val)
{
	dump_bytes_vm(pid, addr, sizeof(u32));
	dbg::write(pid, addr, (void*)&val, sizeof(u32));
	dump_bytes_vm(pid, addr, sizeof(u32));
}

void write_bytes64(pid_t pid, u64 addr, const s64 val)
{
	dump_bytes_vm(pid, addr, sizeof(s64));
	dbg::write(pid, addr, (void*)&val, sizeof(s64));
	dump_bytes_vm(pid, addr, sizeof(s64));
}

void write_string(pid_t pid, u64 addr, const char *string)
{
	s64 len = strlen(string) + 1;
	dump_bytes_vm(pid, addr, len);
	dbg::write(pid, addr, string, len);
	dump_bytes_vm(pid, addr, len);
}

// Must use `-fshort-wchar`
// Otherwise, in freebsd target, wchar_t is 32 bit characters 
extern "C" size_t wcslen( const wchar_t *str );

void write_wstring(pid_t pid, u64 addr, const wchar_t* string)
{
	s64 len = (wcslen(string) * sizeof(wchar_t)) + (1 * sizeof(wchar_t));
	dump_bytes_vm(pid, addr, len);
	dbg::write(pid, addr, string, len);
	dump_bytes_vm(pid, addr, len);
}
